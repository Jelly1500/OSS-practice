8장. Geopandas, GIS 문제

GIS를 사용하는 이유
-(지리적 데이터), (공공 데이터)와 지도 등을 연결
-(이벤트) 탐지 및 (추론)
-(의사 결정) 모델 발굴
-(인과관계) 분석

Geopandas 의 구성요소
-Index : (빠른 조회)를 위해 생성, (중복) 가능
-Data : (관련성) 있는 데이터
-Geometry : (지리정보) 데이터
-Latitude : (위도)
-Longitude: (경도)

Geometry 조작 메서드
- (지역)의 크기 -> .(area)
- (중심점) 파악 -> .(centroid)
- (거리) 측정 -> .(distance)
- (맵) 출력 -> .(plot)
- (폴리곤) 영역 얻기 -> .(boundary)

OSMNX
-Geocoding : (지명, 주소 등 고유 명사)를 통해 (위도), (경도)값 좌표 획득
-Topology : (그래프 이론)을 기반으로 개체 간 (연결관계) 표현
-Routing : (topology) 기반으로 (경로 탐색)

OSMNX의 좋은점
-(도시 계획), (문제점) 분석시 매우 유용
-(노드), (엣지) 중심으로 분석
OSMNX의 한계점
- (도로 네트워크 레이어)만 제공할 수 있다.

code 
ox.graph_from_place : (지역명) 
ox.graph_from_address : (주소)정보
ox.graph_from_point : (위도), (경도) 정보
ox.graph_from_bbox : (동서남북) 좌표
ox.basis_stats : (지역)에 대한 (통계)정보
ox.save_graph_geopackage: (외부데이터)로 출력
ox.save_graphml: (외부데이터)로 출력

Centrality 알고리즘 종류
- (closeness)_centrality
- (degree)_centrality
- (betweenness)_centrality

최단 거리를 구하는 방법
1. (위도)와 (경도)를 이용해 (출발 노드)와 (도착 노드)를 설정
2. (travel_time)가중치를 적용해 두 노드 간 (최단)경로를 찾는다.
------------------------------------------------------------------------------------------------
9장. streamlit 문제

Streamlit이란?
-(WepApp) 개발 Framework, 언어는 (파이썬)
-(Scikit), (keras), (tensorflow), (Pandas), (numpy)와 호환
-개발 속도 (매우 빠름)
-배포 난이도 (아주 쉬움)

Streamlit 명령어
-!npm install localtunnel : localtunnel 설치
-!npx localtunnel --port 8501 : 로컬에서 8501 포트를 연다

Streamlit 앱 배포 방법
1. (github)에 (app.py)와 (requirement.txt) 업로드
2. (streamlit)에 (github)계정으로 로그인
3. (github)에서 (app.py), (requirement.txt)를 (streamlit)에서 구동

CI/CD 뜻
- 풀 네임 : Continuous Integration, Continuous Delivery
- (애플리케이션) 개발 단계를 (자동화), (더 빠른 주기)로 애플리케이션 제공
------------------------------------------------------------------------------------------------
10장. Docker 문제

Docker 주요 개념
-(프로세스)의 (실행 환경)을 정의
-환경 (분리)
-(정의된) (리소스)와 함께 (샌드박스) 설정
-(응용 실행)을 위한 하나의 간단한 (인터페이스)

Docker가 못하는 것
-(가상화)
-(분리된 커널)
-(하이퍼바이저)

Docker의 특징
-(컨테이너)는 (단일) (프로세스)실행
-(단일) (명령어)를 (캡슐화)
-(DB), (웹서버), (네트워크 포트) 위 (개별 서비스) 제공

우분투, 데비안에서 설치하려면
- (curl) https://get.docker.com/ | sh

Docker Image에 대한 설명
-(컨테이너) 제작을 위한 (변하지 않는) 템플릿
-(레지스트리)에서 (pull), (push) 가능
-[(레지스트리)/] [(user)/] name[:tag] 형태의 이미지 이름
-(Latest)는 기본 태그

Docker Container
-(이미지) 의 (인스턴스)
-(start), (stop), restart될 수 있음
-(파일 시스템)내에서 변화를 유지
-(새로운 이미지)를 현재 컨테이너로부터 생성 가능

이미지 제어 커멘드
-docker search <term> : 레지스트리 내에서 검색
-docker pull <image> : 레지스트리에서 이미지 가져오기
-docker push <image> : 레지스트리에 이미지 업로드
-docker image : 다운로드된 이미지 리스팅
-docker tag <oldname> <newname> : 이미지의 이름 바꾸기
-docker rmi <image> : 로컬 이미지 삭제하기
-docker run <image name> : 새로운 컨테이너 실행

중요한 옵션
- -p 8080:80 : (컨테이너)내 80 포트를 (호스트)의 8080포트로 변경
- -v /html:/usr/share/nginx/html : (로컬) 디렉토리를 (컨테이너) 내 디렉토리에 덮어쓰기

컨테이너 제어 커맨드
-docker ps : (현재 실행 중)인 컨테이너 (리스트) 출력, -a 속성을 추가하면 (모든) 컨테이너 (리스트)를 볼 수 있다.
-docker start <container> : 시작
-docker stop <container> : 중지
-docker kill <container> : 강제 종료
-docker remove <container> : 컨테이너 삭제
-docker exec <container> <command> : 컨테이너 내부에서 명령어 실행
-docker exec -it <container> bash : 컨테이너 내부에서 명령어 실행
-docker logs -f <container> : (컨테이너) (로그)보기
-docker cp <파일 경로>: (컨테이너)에 파일 (복사)
-docker diff <container> : 컨테이너의 (파일 시스템)에서 (변화) 감지
-docker commit <container> <imagename> : (현재 컨테이너)에서 (새로운 이미지) 생성

Docker image 레이어
-(도커)의 (이미지)를 구성하는 (각각)의 파일
-각각의 계층이 바로 (아래)에 (종속)
-자주 변경될수록 (가능한 높은 스택)에서 구성

Dockerfile 명령어
-RUN : 현재 (이미지)에서 실행하는 (명령어)와 (결과)를 작성
-FROM Ubuntu : (Ubuntu) 기반으로 함
-ENTRYPOINT <command> : (컨테이너 실행)과 동시에 수행되는 (명령어)

YAML
- 풀 네임: YAML Ain't Markup Language
- (사람)이 읽을 수 있고, 데이터를 (나열)한 언어
- (key:value) 형태

Docker Compose 특징
- (단일 호스트) 위에서 여러 개의 (독립된) 환경 구축
- (컨테이너)가 생성되어도 (디스크 용량)을 보존
- (변화)된 (컨테이너)만 재생성
- (환경)끼리 (조합) 가능
- (동시 작업)를 위한 (오케스트레이션)기능

컨테이너를 구성하는 방법
1. (작업 디렉토리) 생성
2. (requirement).txt 작성
3. (작업 디렉토리) 내에 app.py 만들기
4. (이미지) 만들기, (dockerfile) 작성
5. (docker-compose.yml) 파일 작성
6. (docker-compose) 와 함께 빌드 및 실행









